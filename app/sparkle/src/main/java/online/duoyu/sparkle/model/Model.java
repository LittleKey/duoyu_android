// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: models/proto/model.proto at 8:1
package online.duoyu.sparkle.model.proto;

import android.os.Parcel;
import android.os.ParcelFormatException;
import android.os.Parcelable;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;
import online.duoyu.sparkle.model.ModelFactory;

public final class Model extends Message<Model, Model.Builder> implements Parcelable {
  public static final ProtoAdapter<Model> ADAPTER = new ProtoAdapter_Model();

  public static final Parcelable.Creator<Model> CREATOR = new Parcelable.Creator<Model>() {
    @Override
    public Model createFromParcel(Parcel source) {
      // TODO add other type.
      try {
        Type type = Type.values()[source.readInt()];
        Template template = Template.values()[source.readInt()];
        byte[] bytes = source.createByteArray();
        switch (type) {
          case USER:
            User user = User.ADAPTER.decode(bytes);
            return ModelFactory.createModelFromUser(user, template);
          default:
            throw new ParcelFormatException(String.format("can not parcel '%s'", type.name()));
        }
      } catch (Exception e) {
        e.printStackTrace();
        return null;
      }
    }

    @Override
    public Model[] newArray(int size) {
      return new Model[size];
    }
  };

  @Override
  public int describeContents() {
    return 0;
  }

  @Override
  public void writeToParcel(Parcel dest, int flags) {
    dest.writeInt(type.getValue());
    dest.writeInt(template.getValue());
    switch (type) {
      case USER:
        dest.writeByteArray(user.encode());
        break;
      default:
        break;
    }
  }

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_IDENTITY = "";

  public static final String DEFAULT_TOKEN = "";

  public static final Type DEFAULT_TYPE = Type.NONE;

  public static final Template DEFAULT_TEMPLATE = Template.UNSUPPORTED;

  public static final String DEFAULT_TITLE = "";

  public static final String DEFAULT_SUBTITLE = "";

  public static final String DEFAULT_LANGUAGE = "";

  public static final String DEFAULT_DESCRIPTION = "";

  public static final String DEFAULT_URL = "";

  public static final String DEFAULT_COVER = "";

  public static final String DEFAULT_DATE = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String identity;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String token;

  @WireField(
      tag = 3,
      adapter = "online.duoyu.sparkle.model.proto.Model$Type#ADAPTER"
  )
  public final Type type;

  @WireField(
      tag = 4,
      adapter = "online.duoyu.sparkle.model.proto.Model$Template#ADAPTER"
  )
  public final Template template;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String title;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String subtitle;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String language;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String description;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cover;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String date;

  @WireField(
      tag = 12,
      adapter = "online.duoyu.sparkle.model.proto.User#ADAPTER"
  )
  public final User user;

  @WireField(
      tag = 13,
      adapter = "online.duoyu.sparkle.model.proto.Comment#ADAPTER"
  )
  public final Comment comment;

  @WireField(
      tag = 14,
      adapter = "online.duoyu.sparkle.model.proto.Diary#ADAPTER"
  )
  public final Diary diary;

  @WireField(
      tag = 15,
      adapter = "online.duoyu.sparkle.model.proto.Correct#ADAPTER"
  )
  public final Correct correct;

  @WireField(
      tag = 16,
      adapter = "online.duoyu.sparkle.model.proto.Happening#ADAPTER"
  )
  public final Happening happening;

  @WireField(
      tag = 17,
      adapter = "online.duoyu.sparkle.model.proto.Notification#ADAPTER"
  )
  public final Notification notification;

  @WireField(
      tag = 18,
      adapter = "online.duoyu.sparkle.model.proto.Model#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Model> subModels;

  @WireField(
      tag = 19,
      adapter = "online.duoyu.sparkle.model.proto.Model#ADAPTER"
  )
  public final Model addition;

  public Model(String identity, String token, Type type, Template template, String title, String subtitle, String language, String description, String url, String cover, String date, User user, Comment comment, Diary diary, Correct correct, Happening happening, Notification notification, List<Model> subModels, Model addition) {
    this(identity, token, type, template, title, subtitle, language, description, url, cover, date, user, comment, diary, correct, happening, notification, subModels, addition, ByteString.EMPTY);
  }

  public Model(String identity, String token, Type type, Template template, String title, String subtitle, String language, String description, String url, String cover, String date, User user, Comment comment, Diary diary, Correct correct, Happening happening, Notification notification, List<Model> subModels, Model addition, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.identity = identity;
    this.token = token;
    this.type = type;
    this.template = template;
    this.title = title;
    this.subtitle = subtitle;
    this.language = language;
    this.description = description;
    this.url = url;
    this.cover = cover;
    this.date = date;
    this.user = user;
    this.comment = comment;
    this.diary = diary;
    this.correct = correct;
    this.happening = happening;
    this.notification = notification;
    this.subModels = Internal.immutableCopyOf("subModels", subModels);
    this.addition = addition;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.identity = identity;
    builder.token = token;
    builder.type = type;
    builder.template = template;
    builder.title = title;
    builder.subtitle = subtitle;
    builder.language = language;
    builder.description = description;
    builder.url = url;
    builder.cover = cover;
    builder.date = date;
    builder.user = user;
    builder.comment = comment;
    builder.diary = diary;
    builder.correct = correct;
    builder.happening = happening;
    builder.notification = notification;
    builder.subModels = Internal.copyOf("subModels", subModels);
    builder.addition = addition;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Model)) return false;
    Model o = (Model) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(identity, o.identity)
        && Internal.equals(token, o.token)
        && Internal.equals(type, o.type)
        && Internal.equals(template, o.template)
        && Internal.equals(title, o.title)
        && Internal.equals(subtitle, o.subtitle)
        && Internal.equals(language, o.language)
        && Internal.equals(description, o.description)
        && Internal.equals(url, o.url)
        && Internal.equals(cover, o.cover)
        && Internal.equals(date, o.date)
        && Internal.equals(user, o.user)
        && Internal.equals(comment, o.comment)
        && Internal.equals(diary, o.diary)
        && Internal.equals(correct, o.correct)
        && Internal.equals(happening, o.happening)
        && Internal.equals(notification, o.notification)
        && subModels.equals(o.subModels)
        && Internal.equals(addition, o.addition);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (identity != null ? identity.hashCode() : 0);
      result = result * 37 + (token != null ? token.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (template != null ? template.hashCode() : 0);
      result = result * 37 + (title != null ? title.hashCode() : 0);
      result = result * 37 + (subtitle != null ? subtitle.hashCode() : 0);
      result = result * 37 + (language != null ? language.hashCode() : 0);
      result = result * 37 + (description != null ? description.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (cover != null ? cover.hashCode() : 0);
      result = result * 37 + (date != null ? date.hashCode() : 0);
      result = result * 37 + (user != null ? user.hashCode() : 0);
      result = result * 37 + (comment != null ? comment.hashCode() : 0);
      result = result * 37 + (diary != null ? diary.hashCode() : 0);
      result = result * 37 + (correct != null ? correct.hashCode() : 0);
      result = result * 37 + (happening != null ? happening.hashCode() : 0);
      result = result * 37 + (notification != null ? notification.hashCode() : 0);
      result = result * 37 + subModels.hashCode();
      result = result * 37 + (addition != null ? addition.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (identity != null) builder.append(", identity=").append(identity);
    if (token != null) builder.append(", token=").append(token);
    if (type != null) builder.append(", type=").append(type);
    if (template != null) builder.append(", template=").append(template);
    if (title != null) builder.append(", title=").append(title);
    if (subtitle != null) builder.append(", subtitle=").append(subtitle);
    if (language != null) builder.append(", language=").append(language);
    if (description != null) builder.append(", description=").append(description);
    if (url != null) builder.append(", url=").append(url);
    if (cover != null) builder.append(", cover=").append(cover);
    if (date != null) builder.append(", date=").append(date);
    if (user != null) builder.append(", user=").append(user);
    if (comment != null) builder.append(", comment=").append(comment);
    if (diary != null) builder.append(", diary=").append(diary);
    if (correct != null) builder.append(", correct=").append(correct);
    if (happening != null) builder.append(", happening=").append(happening);
    if (notification != null) builder.append(", notification=").append(notification);
    if (!subModels.isEmpty()) builder.append(", subModels=").append(subModels);
    if (addition != null) builder.append(", addition=").append(addition);
    return builder.replace(0, 2, "Model{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Model, Builder> {
    public String identity;

    public String token;

    public Type type;

    public Template template;

    public String title;

    public String subtitle;

    public String language;

    public String description;

    public String url;

    public String cover;

    public String date;

    public User user;

    public Comment comment;

    public Diary diary;

    public Correct correct;

    public Happening happening;

    public Notification notification;

    public List<Model> subModels;

    public Model addition;

    public Builder() {
      subModels = Internal.newMutableList();
    }

    public Builder identity(String identity) {
      this.identity = identity;
      return this;
    }

    public Builder token(String token) {
      this.token = token;
      return this;
    }

    public Builder type(Type type) {
      this.type = type;
      return this;
    }

    public Builder template(Template template) {
      this.template = template;
      return this;
    }

    public Builder title(String title) {
      this.title = title;
      return this;
    }

    public Builder subtitle(String subtitle) {
      this.subtitle = subtitle;
      return this;
    }

    public Builder language(String language) {
      this.language = language;
      return this;
    }

    public Builder description(String description) {
      this.description = description;
      return this;
    }

    public Builder url(String url) {
      this.url = url;
      return this;
    }

    public Builder cover(String cover) {
      this.cover = cover;
      return this;
    }

    public Builder date(String date) {
      this.date = date;
      return this;
    }

    public Builder user(User user) {
      this.user = user;
      return this;
    }

    public Builder comment(Comment comment) {
      this.comment = comment;
      return this;
    }

    public Builder diary(Diary diary) {
      this.diary = diary;
      return this;
    }

    public Builder correct(Correct correct) {
      this.correct = correct;
      return this;
    }

    public Builder happening(Happening happening) {
      this.happening = happening;
      return this;
    }

    public Builder notification(Notification notification) {
      this.notification = notification;
      return this;
    }

    public Builder subModels(List<Model> subModels) {
      Internal.checkElementsNotNull(subModels);
      this.subModels = subModels;
      return this;
    }

    public Builder addition(Model addition) {
      this.addition = addition;
      return this;
    }

    @Override
    public Model build() {
      return new Model(identity, token, type, template, title, subtitle, language, description, url, cover, date, user, comment, diary, correct, happening, notification, subModels, addition, super.buildUnknownFields());
    }
  }

  public enum Type implements WireEnum {
    NONE(0),

    USER(1),

    DIARY(2),

    CORRECT(3),

    COMMENT(4),

    HAPPENING(5),

    NOTIFICATION(6);

    public static final ProtoAdapter<Type> ADAPTER = ProtoAdapter.newEnumAdapter(Type.class);

    private final int value;

    Type(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Type fromValue(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return USER;
        case 2: return DIARY;
        case 3: return CORRECT;
        case 4: return COMMENT;
        case 5: return HAPPENING;
        case 6: return NOTIFICATION;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  public enum Template implements WireEnum {
    UNSUPPORTED(0),

    DATA(1),

    HEADER(2);

    public static final ProtoAdapter<Template> ADAPTER = ProtoAdapter.newEnumAdapter(Template.class);

    private final int value;

    Template(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Template fromValue(int value) {
      switch (value) {
        case 0: return UNSUPPORTED;
        case 1: return DATA;
        case 2: return HEADER;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_Model extends ProtoAdapter<Model> {
    ProtoAdapter_Model() {
      super(FieldEncoding.LENGTH_DELIMITED, Model.class);
    }

    @Override
    public int encodedSize(Model value) {
      return (value.identity != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.identity) : 0)
          + (value.token != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.token) : 0)
          + (value.type != null ? Type.ADAPTER.encodedSizeWithTag(3, value.type) : 0)
          + (value.template != null ? Template.ADAPTER.encodedSizeWithTag(4, value.template) : 0)
          + (value.title != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.title) : 0)
          + (value.subtitle != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.subtitle) : 0)
          + (value.language != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.language) : 0)
          + (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.description) : 0)
          + (value.url != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.url) : 0)
          + (value.cover != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.cover) : 0)
          + (value.date != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.date) : 0)
          + (value.user != null ? User.ADAPTER.encodedSizeWithTag(12, value.user) : 0)
          + (value.comment != null ? Comment.ADAPTER.encodedSizeWithTag(13, value.comment) : 0)
          + (value.diary != null ? Diary.ADAPTER.encodedSizeWithTag(14, value.diary) : 0)
          + (value.correct != null ? Correct.ADAPTER.encodedSizeWithTag(15, value.correct) : 0)
          + (value.happening != null ? Happening.ADAPTER.encodedSizeWithTag(16, value.happening) : 0)
          + (value.notification != null ? Notification.ADAPTER.encodedSizeWithTag(17, value.notification) : 0)
          + Model.ADAPTER.asRepeated().encodedSizeWithTag(18, value.subModels)
          + (value.addition != null ? Model.ADAPTER.encodedSizeWithTag(19, value.addition) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Model value) throws IOException {
      if (value.identity != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.identity);
      if (value.token != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.token);
      if (value.type != null) Type.ADAPTER.encodeWithTag(writer, 3, value.type);
      if (value.template != null) Template.ADAPTER.encodeWithTag(writer, 4, value.template);
      if (value.title != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.title);
      if (value.subtitle != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.subtitle);
      if (value.language != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.language);
      if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.description);
      if (value.url != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.url);
      if (value.cover != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.cover);
      if (value.date != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.date);
      if (value.user != null) User.ADAPTER.encodeWithTag(writer, 12, value.user);
      if (value.comment != null) Comment.ADAPTER.encodeWithTag(writer, 13, value.comment);
      if (value.diary != null) Diary.ADAPTER.encodeWithTag(writer, 14, value.diary);
      if (value.correct != null) Correct.ADAPTER.encodeWithTag(writer, 15, value.correct);
      if (value.happening != null) Happening.ADAPTER.encodeWithTag(writer, 16, value.happening);
      if (value.notification != null) Notification.ADAPTER.encodeWithTag(writer, 17, value.notification);
      Model.ADAPTER.asRepeated().encodeWithTag(writer, 18, value.subModels);
      if (value.addition != null) Model.ADAPTER.encodeWithTag(writer, 19, value.addition);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Model decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.identity(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.token(ProtoAdapter.STRING.decode(reader)); break;
          case 3: {
            try {
              builder.type(Type.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 4: {
            try {
              builder.template(Template.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 5: builder.title(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.subtitle(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.language(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.description(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.url(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.cover(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.date(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.user(User.ADAPTER.decode(reader)); break;
          case 13: builder.comment(Comment.ADAPTER.decode(reader)); break;
          case 14: builder.diary(Diary.ADAPTER.decode(reader)); break;
          case 15: builder.correct(Correct.ADAPTER.decode(reader)); break;
          case 16: builder.happening(Happening.ADAPTER.decode(reader)); break;
          case 17: builder.notification(Notification.ADAPTER.decode(reader)); break;
          case 18: builder.subModels.add(Model.ADAPTER.decode(reader)); break;
          case 19: builder.addition(Model.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Model redact(Model value) {
      Builder builder = value.newBuilder();
      if (builder.user != null) builder.user = User.ADAPTER.redact(builder.user);
      if (builder.comment != null) builder.comment = Comment.ADAPTER.redact(builder.comment);
      if (builder.diary != null) builder.diary = Diary.ADAPTER.redact(builder.diary);
      if (builder.correct != null) builder.correct = Correct.ADAPTER.redact(builder.correct);
      if (builder.happening != null) builder.happening = Happening.ADAPTER.redact(builder.happening);
      if (builder.notification != null) builder.notification = Notification.ADAPTER.redact(builder.notification);
      Internal.redactElements(builder.subModels, Model.ADAPTER);
      if (builder.addition != null) builder.addition = Model.ADAPTER.redact(builder.addition);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
