// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: models/proto/business/correct.proto at 14:1
package online.duoyu.sparkle.model.business;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireEnum;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;
import online.duoyu.sparkle.model.proto.Correct;

public final class GetCorrectByDiaryIdResponse extends Message<GetCorrectByDiaryIdResponse, GetCorrectByDiaryIdResponse.Builder> {
  public static final ProtoAdapter<GetCorrectByDiaryIdResponse> ADAPTER = new ProtoAdapter_GetCorrectByDiaryIdResponse();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_SUCCESS = false;

  public static final Errno DEFAULT_ERRNO = Errno.UNKNOWN;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean success;

  @WireField(
      tag = 2,
      adapter = "online.duoyu.sparkle.model.proto.Correct#ADAPTER"
  )
  public final Correct correct;

  @WireField(
      tag = 3,
      adapter = "online.duoyu.sparkle.model.business.GetCorrectByDiaryIdResponse$Errno#ADAPTER"
  )
  public final Errno errno;

  public GetCorrectByDiaryIdResponse(Boolean success, Correct correct, Errno errno) {
    this(success, correct, errno, ByteString.EMPTY);
  }

  public GetCorrectByDiaryIdResponse(Boolean success, Correct correct, Errno errno, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.success = success;
    this.correct = correct;
    this.errno = errno;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.success = success;
    builder.correct = correct;
    builder.errno = errno;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetCorrectByDiaryIdResponse)) return false;
    GetCorrectByDiaryIdResponse o = (GetCorrectByDiaryIdResponse) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(success, o.success)
        && Internal.equals(correct, o.correct)
        && Internal.equals(errno, o.errno);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (success != null ? success.hashCode() : 0);
      result = result * 37 + (correct != null ? correct.hashCode() : 0);
      result = result * 37 + (errno != null ? errno.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (success != null) builder.append(", success=").append(success);
    if (correct != null) builder.append(", correct=").append(correct);
    if (errno != null) builder.append(", errno=").append(errno);
    return builder.replace(0, 2, "GetCorrectByDiaryIdResponse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetCorrectByDiaryIdResponse, Builder> {
    public Boolean success;

    public Correct correct;

    public Errno errno;

    public Builder() {
    }

    public Builder success(Boolean success) {
      this.success = success;
      return this;
    }

    public Builder correct(Correct correct) {
      this.correct = correct;
      return this;
    }

    public Builder errno(Errno errno) {
      this.errno = errno;
      return this;
    }

    @Override
    public GetCorrectByDiaryIdResponse build() {
      return new GetCorrectByDiaryIdResponse(success, correct, errno, super.buildUnknownFields());
    }
  }

  public enum Errno implements WireEnum {
    UNKNOWN(0),

    NO_DIARY(1),

    NO_CORRECT(2);

    public static final ProtoAdapter<Errno> ADAPTER = ProtoAdapter.newEnumAdapter(Errno.class);

    private final int value;

    Errno(int value) {
      this.value = value;
    }

    /**
     * Return the constant for {@code value} or null.
     */
    public static Errno fromValue(int value) {
      switch (value) {
        case 0: return UNKNOWN;
        case 1: return NO_DIARY;
        case 2: return NO_CORRECT;
        default: return null;
      }
    }

    @Override
    public int getValue() {
      return value;
    }
  }

  private static final class ProtoAdapter_GetCorrectByDiaryIdResponse extends ProtoAdapter<GetCorrectByDiaryIdResponse> {
    ProtoAdapter_GetCorrectByDiaryIdResponse() {
      super(FieldEncoding.LENGTH_DELIMITED, GetCorrectByDiaryIdResponse.class);
    }

    @Override
    public int encodedSize(GetCorrectByDiaryIdResponse value) {
      return (value.success != null ? ProtoAdapter.BOOL.encodedSizeWithTag(1, value.success) : 0)
          + (value.correct != null ? Correct.ADAPTER.encodedSizeWithTag(2, value.correct) : 0)
          + (value.errno != null ? Errno.ADAPTER.encodedSizeWithTag(3, value.errno) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetCorrectByDiaryIdResponse value) throws IOException {
      if (value.success != null) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.success);
      if (value.correct != null) Correct.ADAPTER.encodeWithTag(writer, 2, value.correct);
      if (value.errno != null) Errno.ADAPTER.encodeWithTag(writer, 3, value.errno);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetCorrectByDiaryIdResponse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.success(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.correct(Correct.ADAPTER.decode(reader)); break;
          case 3: {
            try {
              builder.errno(Errno.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetCorrectByDiaryIdResponse redact(GetCorrectByDiaryIdResponse value) {
      Builder builder = value.newBuilder();
      if (builder.correct != null) builder.correct = Correct.ADAPTER.redact(builder.correct);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
