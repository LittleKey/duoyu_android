// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: models/proto/business/comment.proto at 25:1
package online.duoyu.sparkle.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;

import java.io.IOException;

import okio.ByteString;

public final class CommentRequest extends Message<CommentRequest, CommentRequest.Builder> {
  public static final ProtoAdapter<CommentRequest> ADAPTER = new ProtoAdapter_CommentRequest();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "online.duoyu.sparkle.model.proto.Comment#ADAPTER")
  public final Comment comment;

  public CommentRequest(Comment comment) {
    this(comment, ByteString.EMPTY);
  }

  public CommentRequest(Comment comment, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.comment = comment;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.comment = comment;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CommentRequest)) return false;
    CommentRequest o = (CommentRequest) other;
    return unknownFields().equals(o.unknownFields()) && Internal.equals(comment, o.comment);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (comment != null ? comment.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (comment != null) builder.append(", comment=").append(comment);
    return builder.replace(0, 2, "CommentRequest{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CommentRequest, Builder> {
    public Comment comment;

    public Builder() {
    }

    public Builder comment(Comment comment) {
      this.comment = comment;
      return this;
    }

    @Override
    public CommentRequest build() {
      return new CommentRequest(comment, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CommentRequest extends ProtoAdapter<CommentRequest> {
    ProtoAdapter_CommentRequest() {
      super(FieldEncoding.LENGTH_DELIMITED, CommentRequest.class);
    }

    @Override
    public int encodedSize(CommentRequest value) {
      return (value.comment != null ? Comment.ADAPTER.encodedSizeWithTag(1, value.comment) : 0) + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CommentRequest value) throws IOException {
      if (value.comment != null) Comment.ADAPTER.encodeWithTag(writer, 1, value.comment);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CommentRequest decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1; ) {
        switch (tag) {
          case 1:
            builder.comment(Comment.ADAPTER.decode(reader));
            break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CommentRequest redact(CommentRequest value) {
      Builder builder = value.newBuilder();
      if (builder.comment != null) builder.comment = Comment.ADAPTER.redact(builder.comment);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
