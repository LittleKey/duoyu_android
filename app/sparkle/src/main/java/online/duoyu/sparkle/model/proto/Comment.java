// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: models/proto/model/model.proto at 76:1
package online.duoyu.sparkle.model.proto;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class Comment extends Message<Comment, Comment.Builder> {
  public static final ProtoAdapter<Comment> ADAPTER = new ProtoAdapter_Comment();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_COMMENT_ID = "";

  public static final String DEFAULT_ENTIRE_ID = "";

  public static final String DEFAULT_QUOTE_ID = "";

  public static final String DEFAULT_CONTENT = "";

  public static final String DEFAULT_QUOTE = "";

  public static final Long DEFAULT_DATE = 0L;

  public static final Integer DEFAULT_FLOOR = 0;

  public static final Integer DEFAULT_LIKES = 0;

  public static final Boolean DEFAULT_LIKED = false;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String comment_id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String entire_id;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String quote_id;

  @WireField(
      tag = 4,
      adapter = "online.duoyu.sparkle.model.proto.User#ADAPTER"
  )
  public final User author;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  @WireField(
      tag = 6,
      adapter = "online.duoyu.sparkle.model.proto.User#ADAPTER"
  )
  public final User quote_author;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String quote;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long date;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer floor;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer likes;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean liked;

  public Comment(String comment_id, String entire_id, String quote_id, User author, String content, User quote_author, String quote, Long date, Integer floor, Integer likes, Boolean liked) {
    this(comment_id, entire_id, quote_id, author, content, quote_author, quote, date, floor, likes, liked, ByteString.EMPTY);
  }

  public Comment(String comment_id, String entire_id, String quote_id, User author, String content, User quote_author, String quote, Long date, Integer floor, Integer likes, Boolean liked, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.comment_id = comment_id;
    this.entire_id = entire_id;
    this.quote_id = quote_id;
    this.author = author;
    this.content = content;
    this.quote_author = quote_author;
    this.quote = quote;
    this.date = date;
    this.floor = floor;
    this.likes = likes;
    this.liked = liked;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.comment_id = comment_id;
    builder.entire_id = entire_id;
    builder.quote_id = quote_id;
    builder.author = author;
    builder.content = content;
    builder.quote_author = quote_author;
    builder.quote = quote;
    builder.date = date;
    builder.floor = floor;
    builder.likes = likes;
    builder.liked = liked;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Comment)) return false;
    Comment o = (Comment) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(comment_id, o.comment_id)
        && Internal.equals(entire_id, o.entire_id)
        && Internal.equals(quote_id, o.quote_id)
        && Internal.equals(author, o.author)
        && Internal.equals(content, o.content)
        && Internal.equals(quote_author, o.quote_author)
        && Internal.equals(quote, o.quote)
        && Internal.equals(date, o.date)
        && Internal.equals(floor, o.floor)
        && Internal.equals(likes, o.likes)
        && Internal.equals(liked, o.liked);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (comment_id != null ? comment_id.hashCode() : 0);
      result = result * 37 + (entire_id != null ? entire_id.hashCode() : 0);
      result = result * 37 + (quote_id != null ? quote_id.hashCode() : 0);
      result = result * 37 + (author != null ? author.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (quote_author != null ? quote_author.hashCode() : 0);
      result = result * 37 + (quote != null ? quote.hashCode() : 0);
      result = result * 37 + (date != null ? date.hashCode() : 0);
      result = result * 37 + (floor != null ? floor.hashCode() : 0);
      result = result * 37 + (likes != null ? likes.hashCode() : 0);
      result = result * 37 + (liked != null ? liked.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (comment_id != null) builder.append(", comment_id=").append(comment_id);
    if (entire_id != null) builder.append(", entire_id=").append(entire_id);
    if (quote_id != null) builder.append(", quote_id=").append(quote_id);
    if (author != null) builder.append(", author=").append(author);
    if (content != null) builder.append(", content=").append(content);
    if (quote_author != null) builder.append(", quote_author=").append(quote_author);
    if (quote != null) builder.append(", quote=").append(quote);
    if (date != null) builder.append(", date=").append(date);
    if (floor != null) builder.append(", floor=").append(floor);
    if (likes != null) builder.append(", likes=").append(likes);
    if (liked != null) builder.append(", liked=").append(liked);
    return builder.replace(0, 2, "Comment{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Comment, Builder> {
    public String comment_id;

    public String entire_id;

    public String quote_id;

    public User author;

    public String content;

    public User quote_author;

    public String quote;

    public Long date;

    public Integer floor;

    public Integer likes;

    public Boolean liked;

    public Builder() {
    }

    public Builder comment_id(String comment_id) {
      this.comment_id = comment_id;
      return this;
    }

    public Builder entire_id(String entire_id) {
      this.entire_id = entire_id;
      return this;
    }

    public Builder quote_id(String quote_id) {
      this.quote_id = quote_id;
      return this;
    }

    public Builder author(User author) {
      this.author = author;
      return this;
    }

    public Builder content(String content) {
      this.content = content;
      return this;
    }

    public Builder quote_author(User quote_author) {
      this.quote_author = quote_author;
      return this;
    }

    public Builder quote(String quote) {
      this.quote = quote;
      return this;
    }

    public Builder date(Long date) {
      this.date = date;
      return this;
    }

    public Builder floor(Integer floor) {
      this.floor = floor;
      return this;
    }

    public Builder likes(Integer likes) {
      this.likes = likes;
      return this;
    }

    public Builder liked(Boolean liked) {
      this.liked = liked;
      return this;
    }

    @Override
    public Comment build() {
      return new Comment(comment_id, entire_id, quote_id, author, content, quote_author, quote, date, floor, likes, liked, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Comment extends ProtoAdapter<Comment> {
    ProtoAdapter_Comment() {
      super(FieldEncoding.LENGTH_DELIMITED, Comment.class);
    }

    @Override
    public int encodedSize(Comment value) {
      return (value.comment_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.comment_id) : 0)
          + (value.entire_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.entire_id) : 0)
          + (value.quote_id != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.quote_id) : 0)
          + (value.author != null ? User.ADAPTER.encodedSizeWithTag(4, value.author) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.content) : 0)
          + (value.quote_author != null ? User.ADAPTER.encodedSizeWithTag(6, value.quote_author) : 0)
          + (value.quote != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.quote) : 0)
          + (value.date != null ? ProtoAdapter.INT64.encodedSizeWithTag(8, value.date) : 0)
          + (value.floor != null ? ProtoAdapter.INT32.encodedSizeWithTag(9, value.floor) : 0)
          + (value.likes != null ? ProtoAdapter.INT32.encodedSizeWithTag(10, value.likes) : 0)
          + (value.liked != null ? ProtoAdapter.BOOL.encodedSizeWithTag(11, value.liked) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Comment value) throws IOException {
      if (value.comment_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.comment_id);
      if (value.entire_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.entire_id);
      if (value.quote_id != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.quote_id);
      if (value.author != null) User.ADAPTER.encodeWithTag(writer, 4, value.author);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.content);
      if (value.quote_author != null) User.ADAPTER.encodeWithTag(writer, 6, value.quote_author);
      if (value.quote != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.quote);
      if (value.date != null) ProtoAdapter.INT64.encodeWithTag(writer, 8, value.date);
      if (value.floor != null) ProtoAdapter.INT32.encodeWithTag(writer, 9, value.floor);
      if (value.likes != null) ProtoAdapter.INT32.encodeWithTag(writer, 10, value.likes);
      if (value.liked != null) ProtoAdapter.BOOL.encodeWithTag(writer, 11, value.liked);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Comment decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.comment_id(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.entire_id(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.quote_id(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.author(User.ADAPTER.decode(reader)); break;
          case 5: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.quote_author(User.ADAPTER.decode(reader)); break;
          case 7: builder.quote(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.date(ProtoAdapter.INT64.decode(reader)); break;
          case 9: builder.floor(ProtoAdapter.INT32.decode(reader)); break;
          case 10: builder.likes(ProtoAdapter.INT32.decode(reader)); break;
          case 11: builder.liked(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Comment redact(Comment value) {
      Builder builder = value.newBuilder();
      if (builder.author != null) builder.author = User.ADAPTER.redact(builder.author);
      if (builder.quote_author != null) builder.quote_author = User.ADAPTER.redact(builder.quote_author);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
